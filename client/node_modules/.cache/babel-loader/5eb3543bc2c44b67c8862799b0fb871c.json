{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { GET_KEY, KEY_ERROR, CLEAR_KEY } from \"./types\"; // Upload a Livestream key\n\nexport const uploadLivestreamKey = data => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const key = {\n      data: data\n    };\n    console.log(\"hitting in actions\");\n    console.log(key);\n    const res = await axios.post(\"/api/keys/livestream\", key, config);\n    dispatch({\n      type: GET_KEY,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"error\")));\n    }\n\n    dispatch({\n      type: KEY_ERROR,\n      payload: {\n        msg: err.response,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get Livestream key\n\nexport const getLivestreamKey = () => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/keys/livestream\");\n    dispatch({\n      type: GET_KEY,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: CLEAR_KEY\n    });\n    dispatch({\n      type: KEY_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Upload a Calendar key\n\nexport const uploadCalendarKey = key => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    console.log(key);\n    const res = await axios.post(\"/api/keys/calendar\", key, config);\n    dispatch({\n      type: GET_KEY,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"error\")));\n    }\n\n    dispatch({\n      type: KEY_ERROR,\n      payload: {\n        msg: err.response,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get Calendar key\n\nexport const getCalendarKey = () => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/keys/calendar\");\n    dispatch({\n      type: GET_KEY,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: CLEAR_KEY\n    });\n    dispatch({\n      type: KEY_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/v-thobr/projects/littlerock/LittleRockChurchApp/client/src/actions/key.js"],"names":["axios","setAlert","GET_KEY","KEY_ERROR","CLEAR_KEY","uploadLivestreamKey","data","dispatch","config","headers","key","console","log","res","post","type","payload","err","errors","response","forEach","error","msg","status","getLivestreamKey","get","statusText","uploadCalendarKey","getCalendarKey"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { setAlert } from \"./alert\";\r\nimport { GET_KEY, KEY_ERROR, CLEAR_KEY } from \"./types\";\r\n\r\n// Upload a Livestream key\r\nexport const uploadLivestreamKey = (data) => async (dispatch) => {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    };\r\n\r\n    const key = {\r\n      data: data\r\n    };\r\n\r\n    console.log(\"hitting in actions\");\r\n    console.log(key);\r\n\r\n    const res = await axios.post(\"/api/keys/livestream\", key, config);\r\n    dispatch({\r\n      type: GET_KEY,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"error\")));\r\n    }\r\n\r\n    dispatch({\r\n      type: KEY_ERROR,\r\n      payload: { msg: err.response, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Get Livestream key\r\nexport const getLivestreamKey = () => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get(\"/api/keys/livestream\");\r\n\r\n    dispatch({\r\n      type: GET_KEY,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    dispatch({ type: CLEAR_KEY });\r\n\r\n    dispatch({\r\n      type: KEY_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Upload a Calendar key\r\nexport const uploadCalendarKey = (key) => async (dispatch) => {\r\n  try {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    };\r\n\r\n    console.log(key);\r\n\r\n    const res = await axios.post(\"/api/keys/calendar\", key, config);\r\n    dispatch({\r\n      type: GET_KEY,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"error\")));\r\n    }\r\n\r\n    dispatch({\r\n      type: KEY_ERROR,\r\n      payload: { msg: err.response, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n\r\n// Get Calendar key\r\nexport const getCalendarKey = () => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get(\"/api/keys/calendar\");\r\n\r\n    dispatch({\r\n      type: GET_KEY,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    dispatch({ type: CLEAR_KEY });\r\n\r\n    dispatch({\r\n      type: KEY_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}